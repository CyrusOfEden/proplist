{"shell":true,"revision":"22f232be0a1d8d58bcad15222d8394a52212968e","objects":[{"type":null,"source":"lib/proplist.ex:1","object_type":"ModuleObject","moduledoc":"A proplist is a list of tuples where the first element\nof the tuple is a binary and the second element can be\nany value.\n\nA proplist may have duplicated props so it is not strictly\na dictionary. However most of the functions in this module\nbehave exactly as a dictionary and mimic the API defined\nby the `Dict` behaviour.\n\nFor example, `Proplist.get/3` will get the first entry matching\nthe given prop, regardless if duplicated entries exist.\nSimilarly, `Proplist.put/3` and `Proplist.delete/3` ensure all\nduplicated entries for a given prop are removed when invoked.\n\nA handful of functions exist to handle duplicated props, in\nparticular, `Enum.into/2` allows creating new proplist without\nremoving duplicated props, `get_values/2` returns all values for\na given prop and `delete_first/2` deletes just one of the existing\nentries.\n\nSince a proplist list is simply a list, all the operations defined\nin `Enum` and `List` can be applied.\n","module":"Elixir.Proplist","id":"Proplist"},{"type":"def","source":"lib/proplist.ex:259","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Proplist","id":"delete/2","doc":"Deletes the entries in the proplist list for a specific `prop`.\n\nIf the `prop` does not exist, returns the proplist list unchanged.\nUse `delete_first/2` to delete just the first entry in case of\nduplicated props.\n\n## Examples\n\n    iex> Proplist.delete([{\"a\", 1}, {\"b\", 2}], \"a\")\n    [{\"b\", 2}]\n\n    iex> Proplist.delete([{\"a\", 1}, {\"b\", 2}, {\"a\", 3}], \"a\")\n    [{\"b\", 2}]\n\n    iex> Proplist.delete([{\"b\", 2}], \"a\")\n    [{\"b\", 2}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:235","signature":[["proplist",[],null],["prop",[],null],["value",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Proplist","id":"delete/3","doc":"Deletes the entries in the proplist list for a `prop` with `value`.\n\nIf no `prop` with `value` exists, returns the proplist list unchanged.\n\n## Examples\n\n    iex> Proplist.delete([{\"a\", 1}, {\"b\", 2}], \"a\", 1)\n    [{\"b\", 2}]\n\n    iex> Proplist.delete([{\"a\", 1}, {\"b\", 2}, {\"a\", 3}], \"a\", 3)\n    [{\"a\", 1}, {\"b\", 2}]\n\n    iex> Proplist.delete([{\"b\", 2}], \"a\", 5)\n    [{\"b\", 2}]\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:278","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"delete_first","module_id":"Proplist","id":"delete_first/2","doc":"Deletes the first entry in the proplist list for a specific `prop`.\n\nIf the `prop` does not exist, returns the proplist list unchanged.\n\n## Examples\n\n    iex> Proplist.delete_first([{\"a\", 1}, {\"b\", 2}, {\"a\", 3}], \"a\")\n    [{\"b\", 2}, {\"a\", 3}]\n\n    iex> Proplist.delete_first([{\"b\", 2}], \"a\")\n    [{\"b\", 2}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:535","signature":[["proplist",[],null],["props",[],null]],"object_type":"FunctionObject","name":"drop","module_id":"Proplist","id":"drop/2","doc":"Drops the given props from the proplist list.\n\nDuplicated props are preserved in the new proplist list.\n\n## Examples\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}]\n    iex> Proplist.drop(d, [\"b\", \"d\"])\n    [{\"a\", 1}, {\"c\", 3}]\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}, {\"e\", 5}]\n    iex> Proplist.drop(d, [\"b\", \"d\"])\n    [{\"a\", 1}, {\"c\", 3}, {\"e\", 5}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:336","signature":[["left",[],null],["right",[],null]],"object_type":"FunctionObject","name":"equal?","module_id":"Proplist","id":"equal?/2","doc":"Checks if two proplists are equal.\n\nTwo proplists are considered to be equal if they contain\nthe same props and those props contain the same values.\n\n## Examples\n\n    iex> Proplist.equal?([{\"a\", 1}, {\"b\", 2}], [{\"b\", 2}, {\"a\", 1}])\n    true\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:136","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"fetch","module_id":"Proplist","id":"fetch/2","doc":"Fetches the value for a specific `prop` and returns it in a tuple.\n\nIf the `prop` does not exist, returns `:error`.\n\n## Examples\n\n    iex> Proplist.fetch([{\"a\", 1}], \"a\")\n    {:ok, 1}\n\n    iex> Proplist.fetch([{\"a\", 1}], \"b\")\n    :error\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:158","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"fetch!","module_id":"Proplist","id":"fetch!/2","doc":"Fetches the value for specific `prop`.\n\nIf `prop` does not exist, a `KeyError` is raised.\n\n## Examples\n\n    iex> Proplist.fetch!([{\"a\", 1}], \"a\")\n    1\n\n    iex> Proplist.fetch!([{\"a\", 1}], \"b\")\n    ** (KeyError) key \"b\" not found in: [{\"a\", 1}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:114","signature":[["proplist",[],null],["prop",[],null],["\\\\",[],[["default",[],null],null]]],"object_type":"FunctionObject","name":"get","module_id":"Proplist","id":"get/3","doc":"Gets the value for a specific `prop`.\n\nIf `prop` does not exist, return the default value (`nil` if no default value).\n\nIf duplicated entries exist, the first one is returned.\nUse `get_values/2` to retrieve all entries.\n\n## Examples\n\n    iex> Proplist.get([{\"a\", 1}], \"a\")\n    1\n\n    iex> Proplist.get([{\"a\", 1}], \"b\")\n    nil\n\n    iex> Proplist.get([{\"a\", 1}], \"b\", 3)\n    3\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:175","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"get_values","module_id":"Proplist","id":"get_values/2","doc":"Gets all values for a specific `prop`.\n\n## Examples\n\n    iex> Proplist.get_values([{\"a\", 1}, {\"a\", 2}], \"a\")\n    [1,2]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:605","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"has_key?","module_id":"Proplist","id":"has_key?/2","doc":false,"arity":2},{"type":"def","source":"lib/proplist.ex:396","signature":[["proplist",[],null],["prop",[],null]],"object_type":"FunctionObject","name":"has_prop?","module_id":"Proplist","id":"has_prop?/2","doc":"Returns whether a given `prop` exists in the given `proplist`.\n\n## Examples\n\n    iex> Proplist.has_prop?([{\"a\", 1}], \"a\")\n    true\n\n    iex> Proplist.has_prop?([{\"a\", 1}], \"b\")\n    false\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:600","signature":[["proplist",[],null]],"object_type":"FunctionObject","name":"keys","module_id":"Proplist","id":"keys/1","doc":false,"arity":1},{"type":"def","source":"lib/proplist.ex:352","signature":[["d1",[],null],["d2",[],null]],"object_type":"FunctionObject","name":"merge","module_id":"Proplist","id":"merge/2","doc":"Merges two proplist lists into one.\n\nIf they have duplicated props, the one given in the second argument wins.\n\n## Examples\n\n    iex> Proplist.merge([{\"a\", 1}, {\"b\", 2}], [{\"a\", 3}, {\"d\", 4}]) |> Enum.sort\n    [{\"a\", 3}, {\"b\", 2}, {\"d\", 4}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:371","signature":[["d1",[],null],["d2",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"merge","module_id":"Proplist","id":"merge/3","doc":"Merges two proplist lists into one.\n\nIf they have duplicated props, the given function is invoked to solve conflicts.\n\n## Examples\n\n    iex> Proplist.merge([{\"a\", 1}, {\"b\", 2}], [{\"a\", 3}, {\"d\", 4}], fn (_k, v1, v2) ->\n    ...>   v1 + v2\n    ...> end)\n    [{\"a\", 4}, {\"b\", 2}, {\"d\", 4}]\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:49","signature":[],"object_type":"FunctionObject","name":"new","module_id":"Proplist","id":"new/0","doc":"Returns an empty property list, i.e. an empty list.\n","arity":0},{"type":"def","source":"lib/proplist.ex:66","signature":[["pairs",[],null]],"object_type":"FunctionObject","name":"new","module_id":"Proplist","id":"new/1","doc":"Creates a proplist from an enumerable.\n\nDuplicated entries are removed, the latest one prevails.\nUnlike `Enum.into(enumerable, [])`,\n`Proplist.new(enumerable)` guarantees the props are unique.\n\n## Examples\n\n    iex> Proplist.new([{\"b\", 1}, {\"a\", 2}])\n    [{\"a\", 2}, {\"b\", 1}]\n","arity":1},{"type":"def","source":"lib/proplist.ex:85","signature":[["pairs",[],null],["transform",[],null]],"object_type":"FunctionObject","name":"new","module_id":"Proplist","id":"new/2","doc":"Creates a proplist from an enumerable via the transformation function.\n\nDuplicated entries are removed, the latest one prevails.\nUnlike `Enum.into(enumerable, [], fun)`,\n`Proplist.new(enumerable, fun)` guarantees the props are unique.\n\n## Examples\n\n    iex> Proplist.new([\"a\", \"b\"], fn (x) -> {x, x} end) |> Enum.sort\n    [{\"a\", \"a\"}, {\"b\", \"b\"}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:564","signature":[["proplist",[],null],["prop",[],null],["\\\\",[],[["default",[],null],null]]],"object_type":"FunctionObject","name":"pop","module_id":"Proplist","id":"pop/3","doc":"Returns the first value associated with `prop` in the proplist\nlist as well as the proplist list without `prop`.\n\nAll duplicated props are removed. See `pop_first/3` for\nremoving only the first entry.\n\n## Examples\n\n    iex> Proplist.pop [{\"a\", 1}], \"a\"\n    {1,[]}\n\n    iex> Proplist.pop [{\"a\", 1}], \"b\"\n    {nil,[{\"a\", 1}]}\n\n    iex> Proplist.pop [{\"a\", 1}], \"b\", 3\n    {3,[{\"a\", 1}]}\n\n    iex> Proplist.pop [{\"a\", 1}], \"b\", 3\n    {3,[{\"a\", 1}]}\n\n    iex> Proplist.pop [{\"a\", 1}, {\"a\", 2}], \"a\"\n    {1,[]}\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:593","signature":[["proplist",[],null],["prop",[],null],["\\\\",[],[["default",[],null],null]]],"object_type":"FunctionObject","name":"pop_first","module_id":"Proplist","id":"pop_first/3","doc":"Returns the first value associated with `prop` in the proplist\nlist as well as the proplist list without that particular occurrence\nof `prop`.\n\nDuplicated props are not removed.\n\n## Examples\n\n    iex> Proplist.pop_first [{\"a\", 1}], \"a\"\n    {1,[]}\n\n    iex> Proplist.pop_first [{\"a\", 1}], \"b\"\n    {nil,[{\"a\", 1}]}\n\n    iex> Proplist.pop_first [{\"a\", 1}], \"b\", 3\n    {3,[{\"a\", 1}]}\n\n    iex> Proplist.pop_first [{\"a\", 1}], \"b\", 3\n    {3,[{\"a\", 1}]}\n\n    iex> Proplist.pop_first [{\"a\", 1}, {\"a\", 2}], \"a\"\n    {1,[{\"a\", 2}]}\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:38","signature":[["arg1",[],"Elixir"]],"object_type":"FunctionObject","name":"proplist?","module_id":"Proplist","id":"proplist?/1","doc":"Checks if the given argument is a proplist list or not.\n","arity":1},{"type":"def","source":"lib/proplist.ex:199","signature":[["proplist",[],null]],"object_type":"FunctionObject","name":"props","module_id":"Proplist","id":"props/1","doc":"Returns all props from the proplist list.\n\nDuplicated props appear duplicated in the final list of props.\n\n## Examples\n\n    iex> Proplist.props([{\"a\", 1}, {\"b\", 2}])\n    [\"a\", \"b\"]\n\n    iex> Proplist.props([{\"a\", 1}, {\"b\", 2}, {\"a\", 3}])\n    [\"a\", \"b\", \"a\"]\n\n","arity":1},{"type":"def","source":"lib/proplist.ex:298","signature":[["proplist",[],null],["prop",[],null],["value",[],null]],"object_type":"FunctionObject","name":"put","module_id":"Proplist","id":"put/3","doc":"Puts the given `value` under `prop`.\n\nIf a previous value is already stored, all entries are\nremoved and the value is overridden.\n\n## Examples\n\n    iex> Proplist.put([{\"a\", 1}, {\"b\", 2}], \"a\", 3)\n    [{\"a\", 3}, {\"b\", 2}]\n\n    iex> Proplist.put([{\"a\", 1}, {\"b\", 2}, {\"a\", 4}], \"a\", 3)\n    [{\"a\", 3}, {\"b\", 2}]\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:316","signature":[["proplist",[],null],["prop",[],null],["value",[],null]],"object_type":"FunctionObject","name":"put_new","module_id":"Proplist","id":"put_new/3","doc":"Puts the given `value` under `prop` unless the entry `prop`\nalready exists.\n\n## Examples\n\n    iex> Proplist.put_new([{\"a\", 1}], \"b\", 2)\n    [{\"b\", 2}, {\"a\", 1}]\n\n    iex> Proplist.put_new([{\"a\", 1}, {\"b\", 2}], \"a\", 3)\n    [{\"a\", 1}, {\"b\", 2}]\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:610","signature":[["proplist",[],null]],"object_type":"FunctionObject","name":"size","module_id":"Proplist","id":"size/1","doc":false,"arity":1},{"type":"def","source":"lib/proplist.ex:485","signature":[["proplist",[],null],["props",[],null]],"object_type":"FunctionObject","name":"split","module_id":"Proplist","id":"split/2","doc":"Takes all entries corresponding to the given props and extracts them into a\nseparate proplist list.\n\nReturns a tuple with the new list and the old list with removed props.\n\nKeys for which there are no entires in the proplist list are ignored.\n\nEntries with duplicated props end up in the same proplist list.\n\n## Examples\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}]\n    iex> Proplist.split(d, [\"a\", \"c\", \"e\"])\n    {[{\"a\", 1}, {\"c\", 3}], [{\"b\", 2}, {\"d\", 4}]}\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}, {\"e\", 5}]\n    iex> Proplist.split(d, [\"a\", \"c\", \"e\"])\n    {[{\"a\", 1}, {\"c\", 3}, {\"e\", 5}], [{\"b\", 2}, {\"d\", 4}]}\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:515","signature":[["proplist",[],null],["props",[],null]],"object_type":"FunctionObject","name":"take","module_id":"Proplist","id":"take/2","doc":"Takes all entries corresponding to the given props and returns them in a new\nproplist list.\n\nDuplicated props are preserved in the new proplist list.\n\n## Examples\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}]\n    iex> Proplist.take(d, [\"a\", \"c\", \"e\"])\n    [{\"a\", 1}, {\"c\", 3}]\n\n    iex> d = [{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 4}, {\"e\", 5}]\n    iex> Proplist.take(d, [\"a\", \"c\", \"e\"])\n    [{\"a\", 1}, {\"c\", 3}, {\"e\", 5}]\n\n","arity":2},{"type":"def","source":"lib/proplist.ex:615","signature":[["proplist",[],null]],"object_type":"FunctionObject","name":"to_list","module_id":"Proplist","id":"to_list/1","doc":false,"arity":1},{"type":"def","source":"lib/proplist.ex:452","signature":[["list1",[],"Elixir"],["prop",[],null],["initial",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"update","module_id":"Proplist","id":"update/4","doc":"Updates the `prop` with the given function.\n\nIf the `prop` does not exist, inserts the given `initial` value.\n\nIf there are duplicated props, they are all removed and only the first one\nis updated.\n\n## Examples\n\n    iex> Proplist.update([{\"a\", 1}], \"a\", 13, &(&1 * 2))\n    [{\"a\", 2}]\n\n    iex> Proplist.update([{\"a\", 1}], \"b\", 11, &(&1 * 2))\n    [{\"a\", 1}, {\"b\", 11}]\n\n","arity":4},{"type":"def","source":"lib/proplist.ex:418","signature":[["proplist",[],null],["prop",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"update!","module_id":"Proplist","id":"update!/3","doc":"Updates the `prop` with the given function.\n\nIf the `prop` does not exist, raises `KeyError`.\n\nIf there are duplicated props, they are all removed and only the first one\nis updated.\n\n## Examples\n\n    iex> Proplist.update!([{\"a\", 1}], \"a\", &(&1 * 2))\n    [{\"a\", 2}]\n\n    iex> Proplist.update!([{\"a\", 1}], \"b\", &(&1 * 2))\n    ** (KeyError) key \"b\" not found in: [{\"a\", 1}]\n\n","arity":3},{"type":"def","source":"lib/proplist.ex:213","signature":[["proplist",[],null]],"object_type":"FunctionObject","name":"values","module_id":"Proplist","id":"values/1","doc":"Returns all values from the proplist list.\n\n## Examples\n\n    iex> Proplist.values([{\"a\", 1}, {\"b\", 2}])\n    [1,2]\n\n","arity":1}],"language":"elixir","git_repo_url":"https://github.com/knrz/Proplist.git","client_version":"0.4.0","client_name":"inch_ex","branch_name":"master","args":[]}